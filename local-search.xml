<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OS-C2-进程与线程</title>
    <link href="/2025/01/09/OS-C2-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <url>/2025/01/09/OS-C2-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="第二章——进程与线程"><a href="#第二章——进程与线程" class="headerlink" title="第二章——进程与线程"></a>第二章——进程与线程</h1><h2 id="2-1进程与线程"><a href="#2-1进程与线程" class="headerlink" title="2.1进程与线程"></a>2.1进程与线程</h2><h3 id="（一）进程概念和特征"><a href="#（一）进程概念和特征" class="headerlink" title="（一）进程概念和特征"></a>（一）进程概念和特征</h3><ol><li>进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</li><li>动态性、并发性、独立性、异步性。</li></ol><h3 id="（二）进程组成"><a href="#（二）进程组成" class="headerlink" title="（二）进程组成"></a>（二）进程组成</h3><h4 id="1-进程控制块——PCB（核心）"><a href="#1-进程控制块——PCB（核心）" class="headerlink" title="1.进程控制块——PCB（核心）"></a>1.进程控制块——PCB（核心）</h4><p>….</p><p>2.程序段：多个进程可以运行同一个程序。</p><p>3.数据段：可以是原始数据、中间或最终结果。</p><h3 id="（三）进程状态转换"><a href="#（三）进程状态转换" class="headerlink" title="（三）进程状态转换"></a>（三）进程状态转换</h3><p>1.&#x3D;&#x3D;基本状态&#x3D;&#x3D;：</p><ol><li>运行态：正在CPU上运行。</li></ol><p>单CPU，每个时刻只有一个进程处于运行状态。</p><ol><li>就绪态：获得除CPU外的一切资源。得到CPU就可运行。</li></ol><p>就绪队列；可能有多个就绪态进程。</p><ol><li>阻塞态：等待某资源可用（不包括CPU）或等待某一事件发生。即使CPU空闲，也不能运行。</li></ol><p>根据阻塞原因，多个阻塞队列。</p><p>由于时间片很短，进程会频繁在运行态和就绪态中切换；而较少切换到阻塞态。</p><p>其他：</p><ol><li>创建态：创建工作未完成，eg.资源不足。</li><li>终止态：结束进程时，先设进程为终止态，再处理资源释放和回收。</li></ol><p>&#x3D;&#x3D;状态转换图&#x3D;&#x3D;</p><p>画在纸上了，非常重要！！。</p><h3 id="（四）进程控制"><a href="#（四）进程控制" class="headerlink" title="（四）进程控制"></a>（四）进程控制</h3><p>更好并发执行，提高资源利用率和系统吞吐量。</p><p>使用原语操纵（不可再分）。</p><h4 id="1-进程创建"><a href="#1-进程创建" class="headerlink" title="1.进程创建"></a>1.进程创建</h4><p>1.允许一个进程创建另一个进程。</p><p>子进程创建时，子进程继承父进程资源；撤销时，资源还给父进程。</p><p>父进程撤销，通常同时撤销其子进程。</p><p>2.步骤</p><ol><li>分配唯一进程标识号，申请空白PCB。（PCB资源有限，申请PCB失败，就创建失败。）</li><li>分配运行所需资源，从操作系统&#x2F;父进程得到。（资源不足，不会创建失败，而是处于创建态，等待资源。）</li><li>初始化PCB。</li><li>插入就绪队列。（前提是就绪队列可以接纳新进程。）</li></ol><h4 id="2-进程终止"><a href="#2-进程终止" class="headerlink" title="2.进程终止"></a>2.进程终止</h4><p>1.原因：</p><p>（1）进程正常结束。（2）异常结束。（3）外界干预。</p><p>2.步骤</p><ol><li>根据标识符，检索出该进程的PCB，读出进程状态。</li><li>若运行就终止其运行，将CPU资源分配给其他进程。</li></ol><p>（3. 若有子进程，通常终止其所有子孙进程。）</p><ol><li>归还该进程的资源。</li><li>该PCB从链表&#x2F;队列中删除。</li></ol><h4 id="3-进程阻塞和唤醒"><a href="#3-进程阻塞和唤醒" class="headerlink" title="3.进程阻塞和唤醒"></a>3.进程阻塞和唤醒</h4><table><thead><tr><th>阻塞</th><th>唤醒</th></tr></thead><tbody><tr><td>1.根据标识号找到对应PCB</td><td>1.在事件的等待队列中找到PCB</td></tr><tr><td>2.若为运行态，保护现场。状态转为阻塞态</td><td>2.从等待队列移出，置为就绪态。</td></tr><tr><td>3.PCB插入等待队列&#x2F;阻塞队列。</td><td>3.PCB插入就绪队列，等待调度。</td></tr><tr><td></td><td></td></tr><tr><td>进程自己  调用  Block（阻塞）原语</td><td>其他相关进程  调用  Wakeup（唤醒）原语</td></tr></tbody></table><h3 id="（五）进程通信"><a href="#（五）进程通信" class="headerlink" title="（五）进程通信"></a>（五）进程通信</h3><p>低级：PV操作</p><p>高级（以较高效率传输大量数据）：</p><h4 id="一、共享存储"><a href="#一、共享存储" class="headerlink" title="一、共享存储"></a>一、共享存储</h4><p>操作系统提供 共享存储空间 和 互斥同步工具（eg.PV操作）。</p><p>数据交换由用户自己安排读&#x2F;写指令。</p><p>低级：基于数据结构的共享；高级：基于存储区的共享。</p><p>进程空间一般相互独立，一般不能访问其他进程的空间。（共享空间，通过特殊的系统调用实现。）除了全局共享变量，一般也不允许其他进程访问。</p><p>最快的：共享内存，它没有数据拷贝。</p><h4 id="二、消息传递"><a href="#二、消息传递" class="headerlink" title="二、消息传递"></a>二、消息传递</h4><p>以消息为单位。</p><p>原语：发送消息、接收消息。</p><p>实例：微内核和服务器的通信。主要通信工具。</p><p>直接：发送进程 发给 接收进程，挂在接收进程的消息缓冲队列上。</p><p>间接：发送到某个中间实体上，“信箱”。多用于计算机网络。</p><h4 id="三、管道通信（共享文件）"><a href="#三、管道通信（共享文件）" class="headerlink" title="三、管道通信（共享文件）"></a>三、管道通信（共享文件）</h4><p>pipe文件。管道文件是一个固定大小的缓冲区。</p><p>数据在管道中 先进先出。</p><p>按消费者-生产者方式通信。互斥、同步（管道空，读操作阻塞；管道满，写操作阻塞）、确定对方存在。</p><p>管道只能由创建进程所访问。子进程继承父进程的管道，用它来和父进程通信。</p><p>普通管道只允许 单向通信。（若要双向通信，定义两个管道）</p><h3 id="（六）线程"><a href="#（六）线程" class="headerlink" title="（六）线程"></a>（六）线程</h3><p>减小时空开销，提高并发行能。</p><ol><li>线程不拥有系统资源，（只有一点能保证正常运行的）。</li><li>线程可创建、撤销另一个线程。</li><li>一个线程只属于一个进程。</li><li>线程是独立调度的基本单位，是CPU的分配单元。</li><li>无论线程们是否属于同一个进程，都可并发。</li><li>属于同一个进程的线程们共享进程的地址空间和资源。</li><li>线程切换只需要保存和设置少量的寄存器内容，开销小。</li><li>线程同步和通信简单。</li><li>多线程进程，可以将进程中多个线程分配到多个CPU上进行。（单线程进程，还是只能运行在一个CPU上，各线程交替占用CPU。）</li><li>有线程标识符和线程控制块。</li><li>不同线程可以执行相同程序。</li><li>线程终止后，不立即释放资源。其他线程执行分离函数，才释放，资源才能被其他线程利用。</li><li>被终止但未释放资源的线程仍然可以被其他线程调用，使得它重新恢复运行。</li></ol><p>不是那么重要</p><ol><li>有些系统线程建立后，不会被终止。</li></ol><h4 id="线程实现方式"><a href="#线程实现方式" class="headerlink" title="线程实现方式"></a>线程实现方式</h4><p>记住书上的3张图！！！！。</p><p>（一）用户级线程</p><ol><li>线程管理都在用户态中完成。</li><li>（通过线程库支持多线程；属于用户程序的一部分，不依赖于操作系统的支持）</li><li>调度仍以进程为单位。</li><li>线程切换不需要切换到内核空间。</li><li>&#x3D;&#x3D;一个线程被阻塞，该进程的所有线程都阻塞。&#x3D;&#x3D;</li><li>没有发挥多CPU的优势，同一时刻进程中仅有一个线程能执行。</li><li>支持进程定制自己的调度算法。</li></ol><p>（二）内核级线程</p><ol><li>线程调度和管理在内核空间，用户进程的线程运行在用户态。</li><li>调度以线程为单位。</li><li>线程切换需要切换到内核空间，开销大。</li><li>内核本身支持多线程。</li><li>发挥多CPU的优势，同一时刻同进程中的多个线程并行执行。</li><li>一个线程阻塞，调度进程中其他线程执行。</li></ol><p>（三）组合方式</p><h4 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h4><p>多对一：并发性不是很好。</p><p>一对一</p><p>多对多</p><p>图！！</p><hr><p>王道：</p><ol><li>线程包含CPU现场（指所需的一组寄存器的值），可以独立执行程序。</li><li>单处理系统，可能无进程处于运行状态。死锁全部堵塞。</li><li>并发进程执行的相对速度与进程调度有关。</li><li>一个进程在其生命周期中可执行多个程序。</li><li>高级调度会导致创建新进程。</li><li>进程间可能无关，可能有交互性。</li><li>在引入线程的系统中，进程不再是资源调度和分配的基本单位。</li><li>线程优点包括便于进程通信。</li><li>增强进程安全性不是线程优点。</li><li>一个进程只有一个线程时，两者一样大。</li><li>&#x3D;&#x3D;程序封闭性&#x3D;&#x3D;指执行结果只取决于进程本身，不受外界影响。若有封闭性，则说明执行速度不改变执行结果。所以进程失去封闭性。</li><li><strong>执行速度</strong>会影响进程间的执行顺序和内存冲突问题，从而导致不同的操作结果。</li><li>进程的生命周期不连续。</li><li>并发进程间存在竞争和制约，每次运行可能得到不同结果。</li><li>正文段：代码、赋值数据段、常量、二进制代码、全局赋值变量；</li></ol><p>数据堆段：动态分配的存储区；</p><p>数据栈段：临时使用的变量、未赋值的局部变量、实参传递。</p><ol><li>不同进程有不同的代码段和数据段，全局变量是对同一进程而言的，在不同进程中是不同的变量，没有任何联系，不能交换数据。</li><li>用户级线程可以在任何操作系统中运行。</li><li>内核级线程的程序实体可以在内核态运行。</li><li>用户级线程切换由应用程序自己控制。I&#x2F;O请求涉及到内核态，不会导致用户级线程切换。</li><li>P(wait)表示进程请求某一资源。</li><li>等待输入&#x2F;输出完成会导致阻塞，包括：读文件、从磁盘读数据。</li><li>操作系统看不到用户级线程，只能看到单线程进程，所以操作系统不能为用户级线程创造TCB。</li><li>&#x3D;&#x3D;临界资源一次只能被一个进程所用。&#x3D;&#x3D;所以父进程和子进程不能同时使用同一临界资源。</li></ol><h2 id="2-2-CPU调度"><a href="#2-2-CPU调度" class="headerlink" title="2.2 CPU调度"></a>2.2 CPU调度</h2><p>笔记还未整理，去看王道书。</p><hr><p>王道习题</p><ol><li>中级调度，利于提高内存利用度和系统吞吐量。（针对内存，和CPU和开销没什么关系。）</li><li><strong>时间片轮转调度算法</strong>：&#x3D;&#x3D;使得多个交互用户得到响应&#x3D;&#x3D;，（每个用户都以为自己“独占”计算机使用）；增加系统开销，吞吐量和周转时间均不如批处理，但响应速度快，交互好。</li><li>上下文切换是进程调度的手段。</li><li>&#x3D;&#x3D;处于临界区的进程也可能因中断或抢占而导致调度。&#x3D;&#x3D;（若进程在临界区内请求的是一个需要等待的资源，应自己主动放弃CPU，让其他进程运行。-自己block）。？？？什么是处于临界区的进程？？</li><li>&#x3D;&#x3D;FCFS利于长作业，不利于短作业。&#x3D;&#x3D;CPU繁忙型作业类似于长作业。</li><li>I&#x2F;O繁忙型占用CPU时间不长，适合SJF。</li><li>时间片轮转对长、短作业的时间片都一样；优先级与作业时间长度没有必然关系。</li><li>实时系统要求能处理紧急外部事件，抢占式，优先级高者优先。</li><li>分时系统采用时间片轮转调度算法。</li><li>动态优先权中，随进程执行时间增加而优先权降低，随作业等待时间的增加其优先权上升。</li><li>时间片轮转一定是可抢占的。</li><li>多级反馈队列：系统开销大。</li></ol><p>优点：资源利用率高；并行度高；响应速度快。</p><ol><li>FCFS系统开销最小。</li><li>可能导致饥饿：（1）短作业优先（2）优先级优先。</li></ol><p>先来先服务和时间片轮转都不会出现饥饿，不会因进程特征而忽略它们。</p><ol><li>进程刚完成I&#x2F;O操作，进入就绪队列。应提高优先级。</li><li>注意，数字大还是小代表高优先级。</li><li>注意，系统开销可能也给了具体时间。</li><li>时间片用完后，进程由执行态变为就绪态。</li><li>时间片越短，进程切换次数越多，系统开销越大。</li><li>时间片轮转不需要使用阻塞队列，使用的是进程就绪队列。</li><li>中断处理结束，需要返回原程序或重新选择程序运行（检查到时间片用完），后者需要进程调度。</li><li>在0时刻，CPU开始调度，选择第一个进程开始执行。</li><li>进程上下文切换时，必须保存进程在切换处程序计数器的值。</li><li>“单道”方式指，每次只能执行一个。（无特殊说明，默认按先进来先处理的顺序）</li><li>短作业调度的平均等待时间和平均周转时间是最优的。</li></ol><h2 id="2-3同步与互斥！！重点"><a href="#2-3同步与互斥！！重点" class="headerlink" title="2.3同步与互斥！！重点"></a>2.3同步与互斥！！重点</h2><p>笔记未整理，去看王道书。</p><p>同步：有序。</p><p>王道选择：</p><ol><li><p>信号量，分为互斥量和资源量。</p><p>&#x3D;&#x3D;互斥量初值一般为1&#x3D;&#x3D;，表示在同一时间段，只允许一个进程使用。（设为k，则同一时间段内可以允许k个进程使用。）</p><p>资源信号量的初值可以是任意整数，表示可用的资源数。</p><p>无论是哪种，小于0时，等待的进程数就是信号量的绝对值。</p></li><li><p>一个正在访问临界资源的进程由于申请等待I&#x2F;O操作而被中断时，它（允许其他进程抢占处理器，但不得进入该进程的临界区。</p></li><li><p>临界资源：（1）一定要是共享资源才行。（2）一段时间内只供一个进程使用（与共享资源的区别）。</p><p>非共享数据一定不是临界资源。</p><p>共享资源：可重入的程序代码。</p><p>共享设备：磁盘。</p></li><li><p>共享的缓冲区一定是互斥访问的。</p></li><li><p>P、V操作是一种<strong>低级进程通信原语</strong>，不可分割。</p></li><li><p>P操作可能导致进程阻塞，（p113第13单选题说明不会导致进程就绪）。</p></li><li><p>&#x3D;&#x3D;原语通常不可运行在用户态。&#x3D;&#x3D;</p></li><li><p>&#x3D;&#x3D;同步信号量的初值由用户确定。&#x3D;&#x3D;</p></li><li><p>可被多个进程在任意时刻共享的代码是不允许任何修改的代码（也就是可重入编码），否则无法满足共享。</p></li><li><p>互斥锁只能由对它加锁的线程或进程来解锁。</p></li><li><p>导致死锁：两个线程分别对两个不同的互斥锁先后加锁，但顺序相反。（循环等待）</p></li><li><p>！！一个进程因在互斥信号量mutex上执行V(mutex) 操作而导致唤醒另一个进程时，执行V操作后metux的值为（小于等于0）。</p></li></ol><p>（能唤醒别的，说明有别的在等，原本的metux一定小于0，执行V操作后+1，一定小于等于0）</p><ol><li><p>！！对信号量S执行P操作后，使该进程进入资源等待队列的条件是（S.value&lt;0）。</p></li><li><p>临界区指么每个进程中访问临界资源的那段代码。</p><p>若一个系统中共有5个并发进程涉及某个相同的变量A，变量A的相关临界区是由<u> 5</u>个临界区构成的。</p></li><li><p>管程每次只允许一个进程进入管程。</p></li><li><p>管程是被进程调用的，管程是语法范围，无法创建和撤销。</p></li><li><p>若系统有n个进程，就绪队列中进程的个数最多有n-1个，阻塞队列中最多有n个。</p></li><li><p>PV操作由两个不可中断的过程组成。</p></li><li><p>银行家算法不可以用来解决临界区问题，是避免死锁的算法。</p></li><li><p>生产者-消费者问题用于解决多个进程之间的同步和互斥问题。</p></li><li><p>哲学家就餐问题中，若同时存在左撇子和右撇子，则不会发生死锁。原因是：破坏了循环等待条件。</p></li><li><p>管程可以实现线程的同步和互斥。（不确定，再确认一下）</p></li></ol><p>王道大题：</p><ol><li>互斥有时候是一种访问顺序，而限制可能是先后，可能是资源的有限。这些都是看从什么角度去理解，不是绝对的，只是习惯去怎样设置它的区别。</li><li>注意到底什么时候要while(1)。看是不是循环运行的。（不太懂）</li><li>理解信号量为一种“可容纳”。</li><li>“empty”指，有几个空闲位置；‘’full’指有几个被占用的位置，可理解为“occupied”。</li><li>&#x3D;&#x3D;信号量除了可以P、V操作，还可以利用它的值，做运算，判断相等或不等关系。&#x3D;&#x3D;</li><li>因为设置标志和检查标志间不是原子性的，可以被打断，所以会影响互斥。</li><li>防止死锁，可能引入了新的变量限制条件。</li><li>有的时候，可能要尽量简化用到的信号量，以及彼此关系。</li><li>注意P、V相同的信号量时，一定成对出现。不可能只有P，没有V，或者反过来。</li></ol><h2 id="2-4死锁"><a href="#2-4死锁" class="headerlink" title="2.4死锁"></a>2.4死锁</h2><p>王道选择：</p><ol><li><p>使用信号量可以保证互斥，但不一定能避免死锁。反而PV操作可能加强互斥和占有并等待的条件。</p></li><li><p>对于哲学家就餐问题</p><p>a. 同时检查两支筷子是否能用，可以预防死锁，<strong>而且不会导致饥饿</strong>。</p><p>b. 限制允许拿起筷子的哲学家数量，可以预防死锁，破坏循环等待。</p><p>c. 奇偶拿筷子顺序不同，可以预防死锁，破坏循环等待。</p></li><li><p>如果每个进程只能同时申请或&#x2F;拥有一个资源，就不会发生死锁。</p></li><li><p>死锁预防是保证系统不进入死锁状态的静态策略。</p></li><li><p>资源有序分配破坏循环等待，属于死锁预防。</p></li><li><p>银行家算法利用判断是否处于不安全状态，属于死锁避免。</p></li><li><p>一次性分配策略破坏“保持并请求”。</p></li><li><p>资源分配图化简属于死锁检测。</p></li><li><p>资源分配图出现环路，不一定代表死锁。</p></li><li><p>解除死锁方法有两种：撤销死锁进程，剥夺死锁进程资源。降低死锁进程优先级是无用的方法。</p></li><li><p>银行家算法不可以判断系统是否处于死锁状态。</p></li><li><p>死锁预防方法可以保证系统不发生死锁。</p></li><li><p>死锁预防会限制用户申请资源的顺序，但死锁避免不会，例如银行家算法。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OS-C1-计算机系统概述</title>
    <link href="/2024/09/16/OS-C1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <url>/2024/09/16/OS-C1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h2><p>操作系统基本特征：并发、共享、虚拟和异步。</p><p>最基本：并发和共享。</p><p>区分：<strong>并发</strong>和<strong>并行</strong>。</p><h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h2><p>批处理系统、分时操作系统、实时操作系统</p><p>优缺点</p><h2 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h2><p>关键词：内核态与用户态、中断与异常</p><p>一、</p><ol><li>特权指令：只能内核态使用。例如I&#x2F;O指令（输入&#x2F;输出指令）、关中断指令（屏蔽中断指令）、内存清零、设置时钟指令、停机指令、存取特殊寄存器的指令、关于访问程序状态的指令。</li><li>访管指令：在用户态执行，非特权指令，将用户态转为内核态。</li><li>内核：（1）时钟管理（2）中断机制（3）原语（4）系统控制的数据结构及处理</li></ol><p>二、</p><ol><li>用户态—&gt;内核态，通过硬件（中断机制）完成。</li><li><strong>中断</strong>（外中断）：CPU执行指令外部。I&#x2F;O中断、时钟中断</li></ol><p><strong>异常</strong>（内中断）：CPU执行指令内部。eg. 访存缺页、陷入、访管中断。</p><p>异常不可以被屏蔽。</p><p>异常：故障、自陷、终止（硬件中断）。</p><ol><li>比较 子程序调用 和 中断处理</li><li>系统调用过程</li></ol><p>（1）传递系统调用参数</p><p>（2）执行trap（陷入）指令</p><p>（3）执行服务程序</p><p>（4）返回用户态。</p><h3 id="王道习题："><a href="#王道习题：" class="headerlink" title="王道习题："></a>王道习题：</h3><p>重要：</p><ol><li><p>通道技术是一种硬件技术。</p></li><li><p>进入中断处理的程序属于（  <u> 操作系统程序</u>  ）。</p></li><li><p>可在汇编语言中执行的是用户态。</p></li><li><p>核心态可以执行任何指令；用户态只能执行非特权指令。</p></li><li><p>系统调用&#x2F;中断处理将PC和PSW值压栈；一般过程调用&#x2F;子程序调用只保存PC值。</p></li><li><p>&#x3D;&#x3D;处理中断时，PC值（程序计数器内容）由硬件（中断隐指令）保存&#x3D;&#x3D;；TLB（块表）、Cache由硬件保存；将CPU从用户态变为内核态，通过硬件完成。</p><p>操作系统做了：&#x3D;&#x3D;保存通用寄存器的内容&#x3D;&#x3D;，提供中断服务，初始化中断向量表，保存中断屏蔽字。</p></li><li><p>通过系统调用，访问外设。</p></li><li><p>页置换、进程调度完全由操作系统完成，与系统调用无关。系统调用是用户进程发起的。</p></li></ol><p>一般：</p><ol><li>命令解释程序面向用户。</li><li>编译器是用户程序。</li><li>不同操作系统为应用程序提供不同系统调用接口。</li><li>trap指令可在用户态执行。</li><li>系统调用的 <u> 被调用过程</u>（即执行过程）一定运行在内核态，系统调用的调用可能发生在用户态。</li><li>调用系统调用的指令不一定是特权指令。</li><li>通过fork系统调用创建进程。</li><li>中断向量表，存放 中断处理程序 的入口地址，适合数组结构。</li></ol><h2 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h2><p>分层化；模块化；宏内核、微内核；外核。</p><p>微内核：C&#x2F;S模式。“机制与策略分离”。效率低。高可靠性。</p><p>放入内核的：（1）（2）（3）。</p><h2 id="1-5操作系统引导"><a href="#1-5操作系统引导" class="headerlink" title="1.5操作系统引导"></a>1.5操作系统引导</h2><p>没怎么看。</p><h2 id="1-6虚拟机"><a href="#1-6虚拟机" class="headerlink" title="1.6虚拟机"></a>1.6虚拟机</h2><p>第一类：复制裸机硬件，直接运行在硬件上。运行在最高特权级（内核态）。</p><p>第二类：依赖原机操作系统，运行在宿主操作系统上。eg. VM。运行在用户态。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>概述</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OS王道笔记-第五章-IO管理</title>
    <link href="/2024/08/10/OS-C5-I-O%E7%AE%A1%E7%90%86/"/>
    <url>/2024/08/10/OS-C5-I-O%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="I-O管理"><a href="#I-O管理" class="headerlink" title="I&#x2F;O管理"></a>I&#x2F;O管理</h1><h2 id="5-1-I-O管理概述"><a href="#5-1-I-O管理概述" class="headerlink" title="5.1 I&#x2F;O管理概述"></a>5.1 I&#x2F;O管理概述</h2><ol><li>I&#x2F;O设备分类</li><li><strong>I&#x2F;O接口（又称设备控制器）</strong></li></ol><p>（1）设备控制器与CPU的接口</p><p>​数据线：数据、状态信息。</p><p>​地址线：I&#x2F;O接口的寄存器编号。</p><p>​控制线：控制信号。</p><p>（2）设备控制器与设备的接口</p><p>​可连接一个或多个设备。</p><p>（3）I&#x2F;O逻辑</p><ol><li>I&#x2F;O接口类型</li><li><strong>I&#x2F;O端口</strong>：指可被CPU直接访问的<strong>寄存器</strong>。</li></ol><p>数据寄存器、状态寄存器、控制寄存器。</p><p>（1）独立编址：I&#x2F;O端口地址空间与主存地址空间独立。</p><p>​(a) 两者可重叠。相同地址可能属于不同地址空间。</p><p>​(b) 寻址快；I&#x2F;O指令少，程序清晰但灵活性差；控制复杂。</p><p>（2）统一编址（又称 内存映射I&#x2F;O）</p><p>​(a) I&#x2F;O端口和主存单元在同一地址空间的不同分段，可根据地址范围区分。</p><p>​(b) 灵活；端口编址空间大；降低寻址速度；降低主存可用容量。</p><h3 id="5-1-2-I-O控制方式"><a href="#5-1-2-I-O控制方式" class="headerlink" title="5.1.2 I&#x2F;O控制方式"></a>5.1.2 I&#x2F;O控制方式</h3><h4 id="1-程序直接控制方式"><a href="#1-程序直接控制方式" class="headerlink" title="1.程序直接控制方式"></a>1.程序直接控制方式</h4><ol><li>又称程序轮询方式。</li><li>CPU和I&#x2F;O设备只能串行工作。CPU利用率低。</li><li>未采用中断。</li></ol><h4 id="2-中断驱动方式"><a href="#2-中断驱动方式" class="headerlink" title="2.中断驱动方式"></a>2.中断驱动方式</h4><ol><li>I&#x2F;O设备主动打断CPU运行并请求服务。</li><li>在每个指令周期的末期，CPU检查中断信号。</li><li>CPU和设备并行。</li><li>设备与内存间的数据交换必须经过CPU。</li><li>CPU以字（节）为单位。</li></ol><h4 id="3-DMA方式（直接存储器存取）"><a href="#3-DMA方式（直接存储器存取）" class="headerlink" title="3.DMA方式（直接存储器存取）"></a>3.DMA方式（直接存储器存取）</h4><p>（1）以数据块为基本传送单位。</p><p>（2）传送数据不再经过CPU。（I&#x2F;O设备与内存间存在直接的数据交换通路。）</p><p>（3）仅在传送数据的开始和结束，才需要CPU干预。</p><p>（4）数据传送结束后，DMA控制器向CPU发送中断信号。</p><p>（5）有命令&#x2F;状态寄存器、内存地址寄存器、数据寄存器、数据计数器。</p><p>（6）CPU需要指定传送字节数，以及内存的起始目标地址（输入时）&#x2F;设备的内存源地址（输出时）。</p><p>（7）每个DMA控制器对应一台设备，与内存传送数据。</p><p>（8）CPU和设备并行。</p><h4 id="4-通道控制方式"><a href="#4-通道控制方式" class="headerlink" title="4.通道控制方式"></a>4.通道控制方式</h4><p>（1）I&#x2F;O通道是一种特殊的处理机，属于硬件。</p><p>（2）CPU要指明 通道程序在内存中的位置 和 要访问的I&#x2F;O设备。</p><p>（3）CPU、通道、I&#x2F;O设备并行。</p><p>（4）通道不需要CPU指明传输的数据块大小，以及传输的内存位置。</p><p>（5）一个通道可以控制多台设备与内存的数据交换。</p><p>（6）与一般处理机的区别：（a）指令类型单一（b）没有自己的内存，通道与CPU共享内存。</p><h3 id="5-1-3-I-O软件层次结构"><a href="#5-1-3-I-O软件层次结构" class="headerlink" title="5.1.3 I&#x2F;O软件层次结构"></a>5.1.3 I&#x2F;O软件层次结构</h3><p>从上到下，分别是 <strong>用户层软件、设备独立性软件、设备驱动程序、中断处理程序</strong>。最下面是硬件。</p><p>设备独立性软件、设备驱动程序、中断处理程序都在os内核。</p><p>不同层之间，接口。</p><h4 id="（一）用户层软件"><a href="#（一）用户层软件" class="headerlink" title="（一）用户层软件"></a>（一）用户层软件</h4><p>与用户交互。</p><p>用户层I&#x2F;O软件通过系统调用获取os服务。</p><h4 id="（二）设备独立性软件"><a href="#（二）设备独立性软件" class="headerlink" title="（二）设备独立性软件"></a>（二）设备独立性软件</h4><p>也称设备无关性。</p><ol><li>设备独立性：所用设备不局限于某个具体的物理设备。</li><li>应用程序中，使用逻辑设备名；实际执行，将逻辑设备名 映射成 物理设备名。</li></ol><h4 id="（三）设备驱动程序"><a href="#（三）设备驱动程序" class="headerlink" title="（三）设备驱动程序"></a>（三）设备驱动程序</h4><ol><li>与硬件直接相关。负责实现系统对设备发出的操作指令。</li><li>接收上层抽象I&#x2F;O要求，转换为具体要求后，发送给设备控制器。</li><li>将设备控制器发来信号传给上层。</li><li>每类设备 配置一个 设备驱动程序</li></ol><h4 id="（四）中断处理程序"><a href="#（四）中断处理程序" class="headerlink" title="（四）中断处理程序"></a>（四）中断处理程序</h4><p>底层。</p><h3 id="5-1-4-应用程序I-O接口"><a href="#5-1-4-应用程序I-O接口" class="headerlink" title="5.1.4 应用程序I&#x2F;O接口"></a>5.1.4 应用程序I&#x2F;O接口</h3><p>（一）I&#x2F;O接口分类</p><ol><li>字符设备接口</li></ol><p>以字符为单位。</p><p>（1）eg. 键盘、打印机</p><p>（2）传输速率低；不可寻址。</p><p>（3）通常 中断驱动方式。</p><p>（4）字符设备都属于独占设备，接口需要提供打开、关闭操作，以实现共享互斥。</p><p>（5）get和put。顺序存取。建立字符缓冲区。</p><p>（6）字符设备种类多，差异大。  in-control。通用指令。</p><ol><li>块设备接口</li></ol><p>以数据块为单位。</p><p>（1）eg. 磁盘</p><p>（2）传输速率高；可寻址。</p><p>（3）通常DMA方式。</p><p>（4）隐藏磁盘的二维结构。</p><p>（5）将抽象命令映射为低层操作。</p><p>（6）内存映射接口，通过内存的字节数组访问磁盘。 </p><p>内存映射文件的访问，如同内存读&#x2F;写一样简单。</p><ol><li><p>网络设备接口</p><p>网络套接字接口</p></li></ol><p>（二）阻塞和非阻塞I&#x2F;O</p><ol><li>阻塞I&#x2F;O：调用I&#x2F;O操作时，进程阻塞。</li></ol><p>简单，适合并发量小的</p><ol><li>非阻塞I&#x2F;O：调用I&#x2F;O操作时，进程不阻塞。</li></ol><p>适合并发量大的。</p><p>轮询方式询问I&#x2F;O操作是否完成，会占用CPU时间。</p><hr><h4 id="王道选择题："><a href="#王道选择题：" class="headerlink" title="王道选择题："></a>王道选择题：</h4><ol><li><p>判断：共享设备是指同一时刻内允许多个进程同时访问的设备。（x）</p><blockquote><p>应该是同一时间段内。</p></blockquote></li><li><p>共享设备必须是可寻址的和可随机访问的设备。（否则就无法保证数据的完整性和统一性。）</p></li><li><p>虚拟设备指，把一个物理设备变换成多个对应的逻辑设备。</p></li><li><p>设备控制器通常要提供控制寄存器、状态寄存器、控制命令。</p></li><li><p>中断寄存器位于主机内，不存在I&#x2F;O地址寄存器。</p></li><li><p>通道是一种特殊的处理器，属于硬件技术。</p></li><li><p>DMA是一个控制器。CPU不需要给出DMA可以解释的程序，而给DMA发出一条命令，同时设置DMA控制器寄存器中的值，来启动DMA。</p></li><li><p>及时性不是设备分配中应考虑的问题。</p></li><li><p>设备的编号（作为区分硬件和是识别设备的代号），称为设备的绝对号。</p></li><li><p>通道控制设备控制器，设备控制器控制设备工作。</p></li><li><p>对于同一组输入&#x2F;输出命令，要么CPU给通道发命令，要么CPU直接给设备控制器发生命令，对于同一组命令，设备控制器和通道不会并行。</p></li><li><p>每类设备只需一个驱动程序。</p></li><li><p>设备无关的os软件向上层提供系统调用接口，根据设备类型选择调用相应的驱动程序。</p></li><li><p>设备驱动层负责执行os发出的I&#x2F;O命令，将上层的抽象I&#x2F;O要求转换为具体要求，发给设备控制器，控制设备工作，因设备不同而不同。</p></li><li><p>将系统调用参数翻译成设备操作命令的工作，由设备无关的os软件完成。</p></li><li><p>向设备寄存器的写命令，在设备驱动程序软件中完成的。</p></li><li><p>一定不由硬件来完成的是，主机获取设备输入。（由中断服务程序完成数据的输入和输出。）</p></li><li><p>有中断：中夺冠方式；DMA方式</p><p>无中断：程序直接控制。</p></li><li><p>中断处理程序将设备控制器中的数据传送到内存的缓冲区（读入），或将要输出的数据传送到设备控制器（输出）。</p></li><li><p>对于不同设备，有不同的中断处理程序。</p></li><li><p>中断处理结束后，不一定会返回到被中断的进程。</p><blockquote><p>若采用（1）屏蔽中断方式（单重中断），会返回被中断进程。</p><p>（2）中断嵌套方式（多重中断），若没有更高优先级的中断请求，就会返回被中断进程。；否则处理更高优先级的。</p></blockquote></li><li><p>键盘，通过中断I&#x2F;O方式。计算机通过中断处理程序获得输入信息。</p></li><li><p>与设备无关的软件层，是系统调用的处理程序。</p></li><li><p>DMA方式最后发出中断请求，执行中断服务程序。</p></li></ol><h2 id="5-2设备独立性软件"><a href="#5-2设备独立性软件" class="headerlink" title="5.2设备独立性软件"></a>5.2设备独立性软件</h2><h3 id="5-2-2高速缓存与缓冲区"><a href="#5-2-2高速缓存与缓冲区" class="headerlink" title="5.2.2高速缓存与缓冲区"></a>5.2.2高速缓存与缓冲区</h3><h4 id="一、磁盘高速缓冲-Disk-Cache"><a href="#一、磁盘高速缓冲-Disk-Cache" class="headerlink" title="一、磁盘高速缓冲   Disk Cache"></a>一、磁盘高速缓冲   Disk Cache</h4><p>提高磁盘I&#x2F;O速度。</p><p>用<strong>内存</strong>中的存储空间，暂存磁盘中读出的盘块信息。</p><h4 id="二、缓冲区-buffer"><a href="#二、缓冲区-buffer" class="headerlink" title="二、缓冲区   buffer"></a>二、缓冲区   buffer</h4><ol><li><p>缓和CPU和I&#x2F;O设备间的速度不匹配。</p></li><li><p>硬件缓冲区成本太高，除关键部位外一般不用。</p><p>用内存作为缓冲区。</p></li><li><p>缓冲区装满后才能取。</p></li><li><p>缓冲技术</p></li></ol><p>（1）单缓冲</p><p>T和C可并行，max(C,T)+M</p><p>单缓冲区，在一个时刻只能单方向传递。</p><p>（2）双缓冲</p><p>C和M 可以与T并行，max(C+M,T)</p><p>（3）循环缓冲</p><p>in，out指针</p><p>（4）缓冲池</p><ul><li>缓冲区仅是一块内存空间；而缓冲池包含用于管理的数据结构和一组操作函数的管理机制。</li></ul><p>（a）缓冲池供<strong>多个进程</strong>共享使用。</p><p>（b）缓冲池由多个系统共用的缓冲区组成，包括：</p><ul><li>空缓冲队列、输入队列、输出队列</li><li>以及 用于 收容输入、提取输入、收容输出、提取输出 数据的工作缓冲区。</li></ul><h4 id="三、对比"><a href="#三、对比" class="headerlink" title="三、对比"></a>三、对比</h4><table><thead><tr><th align="center">高速缓存</th><th align="center">缓冲区</th></tr></thead><tbody><tr><td align="center">保存数据拷贝</td><td align="center">传递数据</td></tr><tr><td align="center">存放高速设备经常要访问的数据</td><td align="center">高速设备和低速设备通信都要经过缓冲区</td></tr><tr><td align="center">高速设备有，低速设备一定有</td><td align="center">高速设备有，低速设备不一定有</td></tr><tr><td align="center">高速设备可能访问低速设备</td><td align="center">高速设备永远不会访问低速设备</td></tr></tbody></table><h3 id="5-2-3-设备分配与回收"><a href="#5-2-3-设备分配与回收" class="headerlink" title="5.2.3 设备分配与回收"></a>5.2.3 设备分配与回收</h3><ol><li><p>每个通道连接多个设备控制器，每个设备控制器连接多个物理设备。</p></li><li><p>设备控制表DCT、控制器控制表COCT、通道控制表CHCT</p></li><li><p>系统设备表（SDT）：记录已连到系统中的所有物理设备的情况。</p></li><li><p>独占设备</p><p>共享设备</p><p>虚拟设备：属于可共享设备。</p></li><li><p>设备分配算法</p><p>（1）FCFS</p><p>（2）最高优先级算法：优先级相同时，按FCFS。</p></li><li><p>设备分配中的安全性，指防止进程死锁。</p></li><li><p>安全分配方式：进程发出I&#x2F;O请求后，进入阻塞态。</p><p>（a）阻塞时不能再请求资源，也不能保持任何资源。</p><p>（b）安全，但CPU和I&#x2F;O设备串行。</p></li><li><p>不安全分配方式：发出I&#x2F;O请求后，不阻塞，需要时可以接着发出请求。</p><p>（a）仅当所请求设备已被其他进程占用时，才进入阻塞态。</p><p>（b）一个进程可同时操作多个设备，进程推进迅速。</p><p>（c）可能造成死锁。</p></li><li><p>先分配设备、再分配控制器、最后分配通道。</p></li><li><p>设备分配过程中，使用逻辑设备名。</p><p>只有该类设备的所有设备都忙时，才会将该进程挂到该类设备的等待队列，否则就可以分配给它。</p></li><li><p>逻辑设备表（LUT），表项包含逻辑设备名、物理设备名、设备驱动程序的入口地址。</p><p>（a）整个系统一张LUT</p><p>​逻辑设备名不能相同，主要用于单用户系统。</p><p>（b）每个用户设置一张LUT，在系统中配置系统设备表。</p><p>​不同用户可以使用相同的逻辑设备名。</p></li></ol><h3 id="5-2-4-SPOOLing技术（假脱机技术）"><a href="#5-2-4-SPOOLing技术（假脱机技术）" class="headerlink" title="5.2.4 SPOOLing技术（假脱机技术）"></a>5.2.4 SPOOLing技术（假脱机技术）</h3><ol><li>缓和CPU和I&#x2F;O设备速度不匹配的矛盾。</li><li><strong>将独占设备改为共享设备。</strong></li><li>利用外围控制机，先将低速I&#x2F;O设备上的数据传到高速磁盘上，或者相反。</li><li>引入多道程序技术后，用程序模拟外围控制机。</li><li>空间换时间。</li></ol><h4 id="SPOOLing系统的组成"><a href="#SPOOLing系统的组成" class="headerlink" title="SPOOLing系统的组成"></a>SPOOLing系统的组成</h4><p>（1）输入井和输出井：</p><ol><li>磁盘上</li><li>一个进程的数据保存为一个文件。</li></ol><p>（2）输入缓冲区和输出缓冲区</p><p>内存上</p><p>（3）输入进程和输出进程</p><p>（4）井管理程序</p><p>控制作业与磁盘井间的信息交换。</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>例如打印。</p><p>进程提出请求，输出井为它分配一个缓冲区。（相当于分配一个逻辑设备。）</p><p>实现了<strong>虚拟设备</strong>。</p><hr><h4 id="王道选择："><a href="#王道选择：" class="headerlink" title="王道选择："></a>王道选择：</h4><ol><li>如果I&#x2F;O花费时间比CPU处理时间短的多，则缓冲区几乎无效。</li><li>磁带机和打印机都不是共享设备。</li><li>独占设备采用静态分配，共享设备采用动态分配。</li><li>因设备不同而不同的，要采用设备驱动程序实现。</li><li>系统实现设备与输入&#x2F;输出井之间数据的传送。</li><li>可以使用文件名访问物理设备。</li><li>读&#x2F;写设备的操作是由驱动程序控制完成的。</li><li>提高单机资源利用率的关键技术是 多道程序设计技术。</li><li>虚拟设备是靠SPOOLing技术实现的。</li><li>SPOOLing技术的主要目的是提高独占设备的利用率。</li><li>采用SPOOLing技术的计算机系统中，用户的打印结果首先被送到磁盘固定区域。</li><li>SPOOLing系统中的用户程序可以随时将输出数据送到输出井中，待输出设备空闲时再由SPOOLing系统完成数据的输出操作。</li><li>SPOOLing系统由 预输入程序、井管理程序、缓输出程序。</li><li>采用SPOOLing技术的计算机系统，不需要外围计算机。</li></ol><h2 id="5-3磁盘和固态硬盘"><a href="#5-3磁盘和固态硬盘" class="headerlink" title="5.3磁盘和固态硬盘"></a>5.3磁盘和固态硬盘</h2><p>笔记未整理</p><hr><p>王道选择：</p><ol><li><p>文件系统不一定依赖于磁盘，也可存在于其他的存储介质上，如光盘、闪存、网络。</p></li><li><p>文件系统可以只占用磁盘的一部分空间，而不是整个磁盘；一个磁盘上可以有多个文件系统，也可以没有文件系统的空间。</p></li><li><p>文件系统需要磁盘来存储数据，磁盘需要文件系统来组织数据。</p></li><li><p>文件系统的组织信息放在磁盘上，这些信息和代码合在一起形成文件系统。</p></li><li><p>磁盘是可共享设备。但在每个时刻最多只能有一个作业启动它。</p></li><li><p>磁盘只能顺序读写。</p></li><li><p>既能顺序读写，又能按任意次序读&#x2F;写的存储器有光盘、U盘、磁盘。</p></li><li><p>磁盘调度为了缩短寻道时间。</p></li><li><p>磁盘上的文件以块为单位读写。</p></li><li><p>磁盘中读取数据的时间中，寻道时间影响最大。</p></li><li><p>！！若连续存放，<strong>顺序是按同柱面、同磁道（数量就是磁头&#x2F;盘面数）、下一个扇区</strong>。</p></li><li><p>若连续存放，磁盘的地址结构是（柱面号、磁头号、扇区号）。</p></li><li><p>！！<strong>注意要不要加一减一，从0还是1开始，是第几个还是它的序号，第几个是不是从0开始计数的</strong>。（可以先列举一下简单的情况看，要不要加一减一。）</p></li><li><p>算磁头移动的距离，可以是按某一个方向（磁道号增大&#x2F;减小），一定要单向的，终点减起点。</p></li><li><p>如果是读写一个磁道，则读&#x2F;写磁道时间是 1转要多少秒。即若某磁盘的平均转速为a秒&#x2F;转，则读写一个磁道的时间中的读写磁道时间是a秒。</p></li><li><p>占用磁道数：b&#x2F;N。（总字节数&#x2F;每个磁道的字节数）</p></li><li><p>不会导致磁头臂黏着的是FCFS。（像SCAN、CSCAN、SSTF都会导致磁头黏着）。</p></li><li><p>硬盘的操作系统引导扇区产生在，对硬盘进行高级格式化后。</p><p>（引导扇区一定产生在分区之后。）</p></li><li><p>扇区数据的处理时间主要影响传输时间。</p></li><li><p>旋转延迟的大小（1）取决于磁盘空闲空间的分配程度（2）与文件的物理结构有关。</p></li><li><p>文件的物理结构与磁盘的分配方式相对应。</p></li><li><p>固态硬盘基于闪存技术，没有机械部件，随机读&#x2F;写不需要机械操作，速度明显高于磁盘。</p></li><li><p>固态硬盘写速度比较慢，读速度比较快。</p></li><li><p>固态硬盘比起机械硬盘的优势体现在随机存取的速度上。（机械硬盘转速很快，连续存取比随机存取快的多。）</p></li><li><p>静态磨损均衡算法通常比动态磨损均衡算法表现优秀。</p></li><li><p>固态硬盘需要磨损均衡，磁盘不需要。</p></li><li><p>优化文件物理块的分布可以改善磁盘设备I&#x2F;O性能。</p><blockquote><p>在磁盘上设置多个分区改善不了。</p></blockquote></li><li><p>为文件分配连续的簇可以提高文件访问速度。</p></li><li><p>分区——低级格式化&#x2F;物理格式化。</p></li><li><p>将初始的文件系统数据结构存储到磁盘上——高级格式化&#x2F;逻辑格式化。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>IO管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随记</title>
    <link href="/2024/03/09/%E9%9A%8F%E8%AE%B0/"/>
    <url>/2024/03/09/%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>咕咕咕</p>]]></content>
    
    
    <categories>
      
      <category>个人</category>
      
      <category>感想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2024/03/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/03/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><div class="note note-primary">            <p>欢迎来到我的小天地👏</p>          </div><h3 id="（一）配置"><a href="#（一）配置" class="headerlink" title="（一）配置"></a>（一）配置</h3><p>按照教程配置即可<br>其他教程<br><a href="https://www.fomal.cn/posts/e593433d.html#8-%E5%88%9D%E5%A7%8B%E5%8C%96-Hexo-%E9%A1%B9%E7%9B%AE">Hexo博客搭建基础教程</a><br><a href="https://www.cnblogs.com/huanhao/p/hexobase.html#%E5%9F%BA%E7%A1%80%E7%AF%87%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E4%B8%80">hexo博客搭建教程</a></p><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><h5 id="Butterfly"><a href="#Butterfly" class="headerlink" title="Butterfly"></a>Butterfly</h5><p><a href="https://www.fomal.cn/posts/3451f874.html">教程1</a><br><a href="https://moonshuo.cn/posts/37568.html#%E5%9B%BE%E7%89%87%E7%9A%84%E6%9B%B4%E6%94%B9">主题配置美化教程2</a></p><h5 id="Fluid"><a href="#Fluid" class="headerlink" title="Fluid"></a>Fluid</h5><p>官方教程：<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97/">配置指南</a><br>页面样式：<a href="https://hexo.fluid-dev.com/posts/hello-fluid/">样式参考</a></p><p>评论功能使用<strong>Valine</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[评论插件](https://valine.js.org/)">[1]</span></a></sup>，需要注册LeanCloud<br><a href="https://blog.csdn.net/weixin_51545953/article/details/128503065?spm=1001.2014.3001.5501">Valine搭配Hexo教程</a></p><blockquote><p>Valine 目前使用的是Gravatar 作为评论列表头像。</p><p>请自行登录或注册Gravatar，然后修改自己的头像。</p><p>评论的时候，留下在Gravatar注册时所使用的邮箱即可。</p></blockquote><h3 id="（二）使用"><a href="#（二）使用" class="headerlink" title="（二）使用"></a>（二）使用</h3><p>创建文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><p>更新时不需要clean</p><p>发布文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br>hexo deploy <br></code></pre></td></tr></table></figure><p>保存草稿：<br>只需将Markdown文件保留在 source&#x2F;_drafts 目录下。<br>草稿不会被生成为网页，只有当您决定发布它们时才会移动到 source&#x2F;_posts 目录。</p><p>删除文章：<br>只需删除位于 source&#x2F;_posts 目录下的相应Markdown文件。然后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>和<br>hexo generate<br></code></pre></td></tr></table></figure><p>以清除已删除文章的遗留文件。</p><h3 id="（三）高清图片资源"><a href="#（三）高清图片资源" class="headerlink" title="（三）高清图片资源"></a>（三）高清图片资源</h3><p><a href="https://wallpaperhub.app/">https://wallpaperhub.app/</a><br><a href="https://unsplash.com/">https://unsplash.com/</a></p><h3 id="（四）其他"><a href="#（四）其他" class="headerlink" title="（四）其他"></a>（四）其他</h3><p>待补充</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://valine.js.org/">评论插件</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>个人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
