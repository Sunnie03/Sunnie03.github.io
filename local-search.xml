<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OS-C1-计算机系统概述</title>
    <link href="/2024/09/16/OS-C1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <url>/2024/09/16/OS-C1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h2><p>操作系统基本特征：并发、共享、虚拟和异步。</p><p>最基本：并发和共享。</p><p>区分：<strong>并发</strong>和<strong>并行</strong>。</p><h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h2><p>批处理系统、分时操作系统、实时操作系统</p><p>优缺点</p><h2 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h2><p>关键词：内核态与用户态、中断与异常</p><p>一、</p><ol><li>特权指令：只能内核态使用。例如I&#x2F;O指令（输入&#x2F;输出指令）、关中断指令（屏蔽中断指令）、内存清零、设置时钟指令、停机指令、存取特殊寄存器的指令、关于访问程序状态的指令。</li><li>访管指令：在用户态执行，非特权指令，将用户态转为内核态。</li><li>内核：（1）时钟管理（2）中断机制（3）原语（4）系统控制的数据结构及处理</li></ol><p>二、</p><ol><li>用户态—&gt;内核态，通过硬件（中断机制）完成。</li><li><strong>中断</strong>（外中断）：CPU执行指令外部。I&#x2F;O中断、时钟中断</li></ol><p><strong>异常</strong>（内中断）：CPU执行指令内部。eg. 访存缺页、陷入、访管中断。</p><p>异常不可以被屏蔽。</p><p>异常：故障、自陷、终止（硬件中断）。</p><ol><li>比较 子程序调用 和 中断处理</li><li>系统调用过程</li></ol><p>（1）传递系统调用参数</p><p>（2）执行trap（陷入）指令</p><p>（3）执行服务程序</p><p>（4）返回用户态。</p><h3 id="王道习题："><a href="#王道习题：" class="headerlink" title="王道习题："></a>王道习题：</h3><p>重要：</p><ol><li><p>通道技术是一种硬件技术。</p></li><li><p>进入中断处理的程序属于（  <u> 操作系统程序</u>  ）。</p></li><li><p>可在汇编语言中执行的是用户态。</p></li><li><p>核心态可以执行任何指令；用户态只能执行非特权指令。</p></li><li><p>系统调用&#x2F;中断处理将PC和PSW值压栈；一般过程调用&#x2F;子程序调用只保存PC值。</p></li><li><p>&#x3D;&#x3D;处理中断时，PC值（程序计数器内容）由硬件（中断隐指令）保存&#x3D;&#x3D;；TLB（块表）、Cache由硬件保存；将CPU从用户态变为内核态，通过硬件完成。</p><p>操作系统做了：&#x3D;&#x3D;保存通用寄存器的内容&#x3D;&#x3D;，提供中断服务，初始化中断向量表，保存中断屏蔽字。</p></li><li><p>通过系统调用，访问外设。</p></li><li><p>页置换、进程调度完全由操作系统完成，与系统调用无关。系统调用是用户进程发起的。</p></li></ol><p>一般：</p><ol><li>命令解释程序面向用户。</li><li>编译器是用户程序。</li><li>不同操作系统为应用程序提供不同系统调用接口。</li><li>trap指令可在用户态执行。</li><li>系统调用的 <u> 被调用过程</u>（即执行过程）一定运行在内核态，系统调用的调用可能发生在用户态。</li><li>调用系统调用的指令不一定是特权指令。</li><li>通过fork系统调用创建进程。</li><li>中断向量表，存放 中断处理程序 的入口地址，适合数组结构。</li></ol><h2 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h2><p>分层化；模块化；宏内核、微内核；外核。</p><p>微内核：C&#x2F;S模式。“机制与策略分离”。效率低。高可靠性。</p><p>放入内核的：（1）（2）（3）。</p><h2 id="1-5操作系统引导"><a href="#1-5操作系统引导" class="headerlink" title="1.5操作系统引导"></a>1.5操作系统引导</h2><p>没怎么看。</p><h2 id="1-6虚拟机"><a href="#1-6虚拟机" class="headerlink" title="1.6虚拟机"></a>1.6虚拟机</h2><p>第一类：复制裸机硬件，直接运行在硬件上。运行在最高特权级（内核态）。</p><p>第二类：依赖原机操作系统，运行在宿主操作系统上。eg. VM。运行在用户态。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>概述</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OS王道笔记-第五章-IO管理</title>
    <link href="/2024/08/10/OS-C5-I-O%E7%AE%A1%E7%90%86/"/>
    <url>/2024/08/10/OS-C5-I-O%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="I-O管理"><a href="#I-O管理" class="headerlink" title="I&#x2F;O管理"></a>I&#x2F;O管理</h1><h2 id="5-1-I-O管理概述"><a href="#5-1-I-O管理概述" class="headerlink" title="5.1 I&#x2F;O管理概述"></a>5.1 I&#x2F;O管理概述</h2><ol><li>I&#x2F;O设备分类</li><li><strong>I&#x2F;O接口（又称设备控制器）</strong></li></ol><p>（1）设备控制器与CPU的接口</p><p>​数据线：数据、状态信息。</p><p>​地址线：I&#x2F;O接口的寄存器编号。</p><p>​控制线：控制信号。</p><p>（2）设备控制器与设备的接口</p><p>​可连接一个或多个设备。</p><p>（3）I&#x2F;O逻辑</p><ol><li>I&#x2F;O接口类型</li><li><strong>I&#x2F;O端口</strong>：指可被CPU直接访问的<strong>寄存器</strong>。</li></ol><p>数据寄存器、状态寄存器、控制寄存器。</p><p>（1）独立编址：I&#x2F;O端口地址空间与主存地址空间独立。</p><p>​(a) 两者可重叠。相同地址可能属于不同地址空间。</p><p>​(b) 寻址快；I&#x2F;O指令少，程序清晰但灵活性差；控制复杂。</p><p>（2）统一编址（又称 内存映射I&#x2F;O）</p><p>​(a) I&#x2F;O端口和主存单元在同一地址空间的不同分段，可根据地址范围区分。</p><p>​(b) 灵活；端口编址空间大；降低寻址速度；降低主存可用容量。</p><h3 id="5-1-2-I-O控制方式"><a href="#5-1-2-I-O控制方式" class="headerlink" title="5.1.2 I&#x2F;O控制方式"></a>5.1.2 I&#x2F;O控制方式</h3><h4 id="1-程序直接控制方式"><a href="#1-程序直接控制方式" class="headerlink" title="1.程序直接控制方式"></a>1.程序直接控制方式</h4><ol><li>又称程序轮询方式。</li><li>CPU和I&#x2F;O设备只能串行工作。CPU利用率低。</li><li>未采用中断。</li></ol><h4 id="2-中断驱动方式"><a href="#2-中断驱动方式" class="headerlink" title="2.中断驱动方式"></a>2.中断驱动方式</h4><ol><li>I&#x2F;O设备主动打断CPU运行并请求服务。</li><li>在每个指令周期的末期，CPU检查中断信号。</li><li>CPU和设备并行。</li><li>设备与内存间的数据交换必须经过CPU。</li><li>CPU以字（节）为单位。</li></ol><h4 id="3-DMA方式（直接存储器存取）"><a href="#3-DMA方式（直接存储器存取）" class="headerlink" title="3.DMA方式（直接存储器存取）"></a>3.DMA方式（直接存储器存取）</h4><p>（1）以数据块为基本传送单位。</p><p>（2）传送数据不再经过CPU。（I&#x2F;O设备与内存间存在直接的数据交换通路。）</p><p>（3）仅在传送数据的开始和结束，才需要CPU干预。</p><p>（4）数据传送结束后，DMA控制器向CPU发送中断信号。</p><p>（5）有命令&#x2F;状态寄存器、内存地址寄存器、数据寄存器、数据计数器。</p><p>（6）CPU需要指定传送字节数，以及内存的起始目标地址（输入时）&#x2F;设备的内存源地址（输出时）。</p><p>（7）每个DMA控制器对应一台设备，与内存传送数据。</p><p>（8）CPU和设备并行。</p><h4 id="4-通道控制方式"><a href="#4-通道控制方式" class="headerlink" title="4.通道控制方式"></a>4.通道控制方式</h4><p>（1）I&#x2F;O通道是一种特殊的处理机，属于硬件。</p><p>（2）CPU要指明 通道程序在内存中的位置 和 要访问的I&#x2F;O设备。</p><p>（3）CPU、通道、I&#x2F;O设备并行。</p><p>（4）通道不需要CPU指明传输的数据块大小，以及传输的内存位置。</p><p>（5）一个通道可以控制多台设备与内存的数据交换。</p><p>（6）与一般处理机的区别：（a）指令类型单一（b）没有自己的内存，通道与CPU共享内存。</p><h3 id="5-1-3-I-O软件层次结构"><a href="#5-1-3-I-O软件层次结构" class="headerlink" title="5.1.3 I&#x2F;O软件层次结构"></a>5.1.3 I&#x2F;O软件层次结构</h3><p>从上到下，分别是 <strong>用户层软件、设备独立性软件、设备驱动程序、中断处理程序</strong>。最下面是硬件。</p><p>设备独立性软件、设备驱动程序、中断处理程序都在os内核。</p><p>不同层之间，接口。</p><h4 id="（一）用户层软件"><a href="#（一）用户层软件" class="headerlink" title="（一）用户层软件"></a>（一）用户层软件</h4><p>与用户交互。</p><p>用户层I&#x2F;O软件通过系统调用获取os服务。</p><h4 id="（二）设备独立性软件"><a href="#（二）设备独立性软件" class="headerlink" title="（二）设备独立性软件"></a>（二）设备独立性软件</h4><p>也称设备无关性。</p><ol><li>设备独立性：所用设备不局限于某个具体的物理设备。</li><li>应用程序中，使用逻辑设备名；实际执行，将逻辑设备名 映射成 物理设备名。</li></ol><h4 id="（三）设备驱动程序"><a href="#（三）设备驱动程序" class="headerlink" title="（三）设备驱动程序"></a>（三）设备驱动程序</h4><ol><li>与硬件直接相关。负责实现系统对设备发出的操作指令。</li><li>接收上层抽象I&#x2F;O要求，转换为具体要求后，发送给设备控制器。</li><li>将设备控制器发来信号传给上层。</li><li>每类设备 配置一个 设备驱动程序</li></ol><h4 id="（四）中断处理程序"><a href="#（四）中断处理程序" class="headerlink" title="（四）中断处理程序"></a>（四）中断处理程序</h4><p>底层。</p><h3 id="5-1-4-应用程序I-O接口"><a href="#5-1-4-应用程序I-O接口" class="headerlink" title="5.1.4 应用程序I&#x2F;O接口"></a>5.1.4 应用程序I&#x2F;O接口</h3><p>（一）I&#x2F;O接口分类</p><ol><li>字符设备接口</li></ol><p>以字符为单位。</p><p>（1）eg. 键盘、打印机</p><p>（2）传输速率低；不可寻址。</p><p>（3）通常 中断驱动方式。</p><p>（4）字符设备都属于独占设备，接口需要提供打开、关闭操作，以实现共享互斥。</p><p>（5）get和put。顺序存取。建立字符缓冲区。</p><p>（6）字符设备种类多，差异大。  in-control。通用指令。</p><ol><li>块设备接口</li></ol><p>以数据块为单位。</p><p>（1）eg. 磁盘</p><p>（2）传输速率高；可寻址。</p><p>（3）通常DMA方式。</p><p>（4）隐藏磁盘的二维结构。</p><p>（5）将抽象命令映射为低层操作。</p><p>（6）内存映射接口，通过内存的字节数组访问磁盘。 </p><p>内存映射文件的访问，如同内存读&#x2F;写一样简单。</p><ol><li><p>网络设备接口</p><p>网络套接字接口</p></li></ol><p>（二）阻塞和非阻塞I&#x2F;O</p><ol><li>阻塞I&#x2F;O：调用I&#x2F;O操作时，进程阻塞。</li></ol><p>简单，适合并发量小的</p><ol><li>非阻塞I&#x2F;O：调用I&#x2F;O操作时，进程不阻塞。</li></ol><p>适合并发量大的。</p><p>轮询方式询问I&#x2F;O操作是否完成，会占用CPU时间。</p><hr><h4 id="王道选择题："><a href="#王道选择题：" class="headerlink" title="王道选择题："></a>王道选择题：</h4><ol><li><p>判断：共享设备是指同一时刻内允许多个进程同时访问的设备。（x）</p><blockquote><p>应该是同一时间段内。</p></blockquote></li><li><p>共享设备必须是可寻址的和可随机访问的设备。（否则就无法保证数据的完整性和统一性。）</p></li><li><p>虚拟设备指，把一个物理设备变换成多个对应的逻辑设备。</p></li><li><p>设备控制器通常要提供控制寄存器、状态寄存器、控制命令。</p></li><li><p>中断寄存器位于主机内，不存在I&#x2F;O地址寄存器。</p></li><li><p>通道是一种特殊的处理器，属于硬件技术。</p></li><li><p>DMA是一个控制器。CPU不需要给出DMA可以解释的程序，而给DMA发出一条命令，同时设置DMA控制器寄存器中的值，来启动DMA。</p></li><li><p>及时性不是设备分配中应考虑的问题。</p></li><li><p>设备的编号（作为区分硬件和是识别设备的代号），称为设备的绝对号。</p></li><li><p>通道控制设备控制器，设备控制器控制设备工作。</p></li><li><p>对于同一组输入&#x2F;输出命令，要么CPU给通道发命令，要么CPU直接给设备控制器发生命令，对于同一组命令，设备控制器和通道不会并行。</p></li><li><p>每类设备只需一个驱动程序。</p></li><li><p>设备无关的os软件向上层提供系统调用接口，根据设备类型选择调用相应的驱动程序。</p></li><li><p>设备驱动层负责执行os发出的I&#x2F;O命令，将上层的抽象I&#x2F;O要求转换为具体要求，发给设备控制器，控制设备工作，因设备不同而不同。</p></li><li><p>将系统调用参数翻译成设备操作命令的工作，由设备无关的os软件完成。</p></li><li><p>向设备寄存器的写命令，在设备驱动程序软件中完成的。</p></li><li><p>一定不由硬件来完成的是，主机获取设备输入。（由中断服务程序完成数据的输入和输出。）</p></li><li><p>有中断：中夺冠方式；DMA方式</p><p>无中断：程序直接控制。</p></li><li><p>中断处理程序将设备控制器中的数据传送到内存的缓冲区（读入），或将要输出的数据传送到设备控制器（输出）。</p></li><li><p>对于不同设备，有不同的中断处理程序。</p></li><li><p>中断处理结束后，不一定会返回到被中断的进程。</p><blockquote><p>若采用（1）屏蔽中断方式（单重中断），会返回被中断进程。</p><p>（2）中断嵌套方式（多重中断），若没有更高优先级的中断请求，就会返回被中断进程。；否则处理更高优先级的。</p></blockquote></li><li><p>键盘，通过中断I&#x2F;O方式。计算机通过中断处理程序获得输入信息。</p></li><li><p>与设备无关的软件层，是系统调用的处理程序。</p></li><li><p>DMA方式最后发出中断请求，执行中断服务程序。</p></li></ol><h2 id="5-2设备独立性软件"><a href="#5-2设备独立性软件" class="headerlink" title="5.2设备独立性软件"></a>5.2设备独立性软件</h2><h3 id="5-2-2高速缓存与缓冲区"><a href="#5-2-2高速缓存与缓冲区" class="headerlink" title="5.2.2高速缓存与缓冲区"></a>5.2.2高速缓存与缓冲区</h3><h4 id="一、磁盘高速缓冲-Disk-Cache"><a href="#一、磁盘高速缓冲-Disk-Cache" class="headerlink" title="一、磁盘高速缓冲   Disk Cache"></a>一、磁盘高速缓冲   Disk Cache</h4><p>提高磁盘I&#x2F;O速度。</p><p>用<strong>内存</strong>中的存储空间，暂存磁盘中读出的盘块信息。</p><h4 id="二、缓冲区-buffer"><a href="#二、缓冲区-buffer" class="headerlink" title="二、缓冲区   buffer"></a>二、缓冲区   buffer</h4><ol><li><p>缓和CPU和I&#x2F;O设备间的速度不匹配。</p></li><li><p>硬件缓冲区成本太高，除关键部位外一般不用。</p><p>用内存作为缓冲区。</p></li><li><p>缓冲区装满后才能取。</p></li><li><p>缓冲技术</p></li></ol><p>（1）单缓冲</p><p>T和C可并行，max(C,T)+M</p><p>单缓冲区，在一个时刻只能单方向传递。</p><p>（2）双缓冲</p><p>C和M 可以与T并行，max(C+M,T)</p><p>（3）循环缓冲</p><p>in，out指针</p><p>（4）缓冲池</p><ul><li>缓冲区仅是一块内存空间；而缓冲池包含用于管理的数据结构和一组操作函数的管理机制。</li></ul><p>（a）缓冲池供<strong>多个进程</strong>共享使用。</p><p>（b）缓冲池由多个系统共用的缓冲区组成，包括：</p><ul><li>空缓冲队列、输入队列、输出队列</li><li>以及 用于 收容输入、提取输入、收容输出、提取输出 数据的工作缓冲区。</li></ul><h4 id="三、对比"><a href="#三、对比" class="headerlink" title="三、对比"></a>三、对比</h4><table><thead><tr><th align="center">高速缓存</th><th align="center">缓冲区</th></tr></thead><tbody><tr><td align="center">保存数据拷贝</td><td align="center">传递数据</td></tr><tr><td align="center">存放高速设备经常要访问的数据</td><td align="center">高速设备和低速设备通信都要经过缓冲区</td></tr><tr><td align="center">高速设备有，低速设备一定有</td><td align="center">高速设备有，低速设备不一定有</td></tr><tr><td align="center">高速设备可能访问低速设备</td><td align="center">高速设备永远不会访问低速设备</td></tr></tbody></table><h3 id="5-2-3-设备分配与回收"><a href="#5-2-3-设备分配与回收" class="headerlink" title="5.2.3 设备分配与回收"></a>5.2.3 设备分配与回收</h3><ol><li><p>每个通道连接多个设备控制器，每个设备控制器连接多个物理设备。</p></li><li><p>设备控制表DCT、控制器控制表COCT、通道控制表CHCT</p></li><li><p>系统设备表（SDT）：记录已连到系统中的所有物理设备的情况。</p></li><li><p>独占设备</p><p>共享设备</p><p>虚拟设备：属于可共享设备。</p></li><li><p>设备分配算法</p><p>（1）FCFS</p><p>（2）最高优先级算法：优先级相同时，按FCFS。</p></li><li><p>设备分配中的安全性，指防止进程死锁。</p></li><li><p>安全分配方式：进程发出I&#x2F;O请求后，进入阻塞态。</p><p>（a）阻塞时不能再请求资源，也不能保持任何资源。</p><p>（b）安全，但CPU和I&#x2F;O设备串行。</p></li><li><p>不安全分配方式：发出I&#x2F;O请求后，不阻塞，需要时可以接着发出请求。</p><p>（a）仅当所请求设备已被其他进程占用时，才进入阻塞态。</p><p>（b）一个进程可同时操作多个设备，进程推进迅速。</p><p>（c）可能造成死锁。</p></li><li><p>先分配设备、再分配控制器、最后分配通道。</p></li><li><p>设备分配过程中，使用逻辑设备名。</p><p>只有该类设备的所有设备都忙时，才会将该进程挂到该类设备的等待队列，否则就可以分配给它。</p></li><li><p>逻辑设备表（LUT），表项包含逻辑设备名、物理设备名、设备驱动程序的入口地址。</p><p>（a）整个系统一张LUT</p><p>​逻辑设备名不能相同，主要用于单用户系统。</p><p>（b）每个用户设置一张LUT，在系统中配置系统设备表。</p><p>​不同用户可以使用相同的逻辑设备名。</p></li></ol><h3 id="5-2-4-SPOOLing技术（假脱机技术）"><a href="#5-2-4-SPOOLing技术（假脱机技术）" class="headerlink" title="5.2.4 SPOOLing技术（假脱机技术）"></a>5.2.4 SPOOLing技术（假脱机技术）</h3><ol><li>缓和CPU和I&#x2F;O设备速度不匹配的矛盾。</li><li><strong>将独占设备改为共享设备。</strong></li><li>利用外围控制机，先将低速I&#x2F;O设备上的数据传到高速磁盘上，或者相反。</li><li>引入多道程序技术后，用程序模拟外围控制机。</li><li>空间换时间。</li></ol><h4 id="SPOOLing系统的组成"><a href="#SPOOLing系统的组成" class="headerlink" title="SPOOLing系统的组成"></a>SPOOLing系统的组成</h4><p>（1）输入井和输出井：</p><ol><li>磁盘上</li><li>一个进程的数据保存为一个文件。</li></ol><p>（2）输入缓冲区和输出缓冲区</p><p>内存上</p><p>（3）输入进程和输出进程</p><p>（4）井管理程序</p><p>控制作业与磁盘井间的信息交换。</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>例如打印。</p><p>进程提出请求，输出井为它分配一个缓冲区。（相当于分配一个逻辑设备。）</p><p>实现了<strong>虚拟设备</strong>。</p><hr><h4 id="王道选择："><a href="#王道选择：" class="headerlink" title="王道选择："></a>王道选择：</h4><ol><li>如果I&#x2F;O花费时间比CPU处理时间短的多，则缓冲区几乎无效。</li><li>磁带机和打印机都不是共享设备。</li><li>独占设备采用静态分配，共享设备采用动态分配。</li><li>因设备不同而不同的，要采用设备驱动程序实现。</li><li>系统实现设备与输入&#x2F;输出井之间数据的传送。</li><li>可以使用文件名访问物理设备。</li><li>读&#x2F;写设备的操作是由驱动程序控制完成的。</li><li>提高单机资源利用率的关键技术是 多道程序设计技术。</li><li>虚拟设备是靠SPOOLing技术实现的。</li><li>SPOOLing技术的主要目的是提高独占设备的利用率。</li><li>采用SPOOLing技术的计算机系统中，用户的打印结果首先被送到磁盘固定区域。</li><li>SPOOLing系统中的用户程序可以随时将输出数据送到输出井中，待输出设备空闲时再由SPOOLing系统完成数据的输出操作。</li><li>SPOOLing系统由 预输入程序、井管理程序、缓输出程序。</li><li>采用SPOOLing技术的计算机系统，不需要外围计算机。</li></ol><h2 id="5-3磁盘和固态硬盘"><a href="#5-3磁盘和固态硬盘" class="headerlink" title="5.3磁盘和固态硬盘"></a>5.3磁盘和固态硬盘</h2><p>笔记未整理</p><hr><p>王道选择：</p><ol><li><p>文件系统不一定依赖于磁盘，也可存在于其他的存储介质上，如光盘、闪存、网络。</p></li><li><p>文件系统可以只占用磁盘的一部分空间，而不是整个磁盘；一个磁盘上可以有多个文件系统，也可以没有文件系统的空间。</p></li><li><p>文件系统需要磁盘来存储数据，磁盘需要文件系统来组织数据。</p></li><li><p>文件系统的组织信息放在磁盘上，这些信息和代码合在一起形成文件系统。</p></li><li><p>磁盘是可共享设备。但在每个时刻最多只能有一个作业启动它。</p></li><li><p>磁盘只能顺序读写。</p></li><li><p>既能顺序读写，又能按任意次序读&#x2F;写的存储器有光盘、U盘、磁盘。</p></li><li><p>磁盘调度为了缩短寻道时间。</p></li><li><p>磁盘上的文件以块为单位读写。</p></li><li><p>磁盘中读取数据的时间中，寻道时间影响最大。</p></li><li><p>！！若连续存放，<strong>顺序是按同柱面、同磁道（数量就是磁头&#x2F;盘面数）、下一个扇区</strong>。</p></li><li><p>若连续存放，磁盘的地址结构是（柱面号、磁头号、扇区号）。</p></li><li><p>！！<strong>注意要不要加一减一，从0还是1开始，是第几个还是它的序号，第几个是不是从0开始计数的</strong>。（可以先列举一下简单的情况看，要不要加一减一。）</p></li><li><p>算磁头移动的距离，可以是按某一个方向（磁道号增大&#x2F;减小），一定要单向的，终点减起点。</p></li><li><p>如果是读写一个磁道，则读&#x2F;写磁道时间是 1转要多少秒。即若某磁盘的平均转速为a秒&#x2F;转，则读写一个磁道的时间中的读写磁道时间是a秒。</p></li><li><p>占用磁道数：b&#x2F;N。（总字节数&#x2F;每个磁道的字节数）</p></li><li><p>不会导致磁头臂黏着的是FCFS。（像SCAN、CSCAN、SSTF都会导致磁头黏着）。</p></li><li><p>硬盘的操作系统引导扇区产生在，对硬盘进行高级格式化后。</p><p>（引导扇区一定产生在分区之后。）</p></li><li><p>扇区数据的处理时间主要影响传输时间。</p></li><li><p>旋转延迟的大小（1）取决于磁盘空闲空间的分配程度（2）与文件的物理结构有关。</p></li><li><p>文件的物理结构与磁盘的分配方式相对应。</p></li><li><p>固态硬盘基于闪存技术，没有机械部件，随机读&#x2F;写不需要机械操作，速度明显高于磁盘。</p></li><li><p>固态硬盘写速度比较慢，读速度比较快。</p></li><li><p>固态硬盘比起机械硬盘的优势体现在随机存取的速度上。（机械硬盘转速很快，连续存取比随机存取快的多。）</p></li><li><p>静态磨损均衡算法通常比动态磨损均衡算法表现优秀。</p></li><li><p>固态硬盘需要磨损均衡，磁盘不需要。</p></li><li><p>优化文件物理块的分布可以改善磁盘设备I&#x2F;O性能。</p><blockquote><p>在磁盘上设置多个分区改善不了。</p></blockquote></li><li><p>为文件分配连续的簇可以提高文件访问速度。</p></li><li><p>分区——低级格式化&#x2F;物理格式化。</p></li><li><p>将初始的文件系统数据结构存储到磁盘上——高级格式化&#x2F;逻辑格式化。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>IO管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随记</title>
    <link href="/2024/03/09/%E9%9A%8F%E8%AE%B0/"/>
    <url>/2024/03/09/%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>咕咕咕</p>]]></content>
    
    
    <categories>
      
      <category>个人</category>
      
      <category>感想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OS</title>
    <link href="/2024/03/09/OS/"/>
    <url>/2024/03/09/OS/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h3 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a>（一）</h3><p>内容</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2024/03/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/03/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><div class="note note-primary">            <p>欢迎来到我的小天地👏</p>          </div><h3 id="（一）配置"><a href="#（一）配置" class="headerlink" title="（一）配置"></a>（一）配置</h3><p>按照教程配置即可<br>其他教程<br><a href="https://www.fomal.cn/posts/e593433d.html#8-%E5%88%9D%E5%A7%8B%E5%8C%96-Hexo-%E9%A1%B9%E7%9B%AE">Hexo博客搭建基础教程</a><br><a href="https://www.cnblogs.com/huanhao/p/hexobase.html#%E5%9F%BA%E7%A1%80%E7%AF%87%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E4%B8%80">hexo博客搭建教程</a></p><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><h5 id="Butterfly"><a href="#Butterfly" class="headerlink" title="Butterfly"></a>Butterfly</h5><p><a href="https://www.fomal.cn/posts/3451f874.html">教程1</a><br><a href="https://moonshuo.cn/posts/37568.html#%E5%9B%BE%E7%89%87%E7%9A%84%E6%9B%B4%E6%94%B9">主题配置美化教程2</a></p><h5 id="Fluid"><a href="#Fluid" class="headerlink" title="Fluid"></a>Fluid</h5><p>官方教程：<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97/">配置指南</a><br>页面样式：<a href="https://hexo.fluid-dev.com/posts/hello-fluid/">样式参考</a></p><p>评论功能使用<strong>Valine</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[评论插件](https://valine.js.org/)">[1]</span></a></sup>，需要注册LeanCloud<br><a href="https://blog.csdn.net/weixin_51545953/article/details/128503065?spm=1001.2014.3001.5501">Valine搭配Hexo教程</a></p><blockquote><p>Valine 目前使用的是Gravatar 作为评论列表头像。</p><p>请自行登录或注册Gravatar，然后修改自己的头像。</p><p>评论的时候，留下在Gravatar注册时所使用的邮箱即可。</p></blockquote><h3 id="（二）使用"><a href="#（二）使用" class="headerlink" title="（二）使用"></a>（二）使用</h3><p>创建文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><p>更新时不需要clean</p><p>发布文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br>hexo deploy <br></code></pre></td></tr></table></figure><p>保存草稿：<br>只需将Markdown文件保留在 source&#x2F;_drafts 目录下。<br>草稿不会被生成为网页，只有当您决定发布它们时才会移动到 source&#x2F;_posts 目录。</p><p>删除文章：<br>只需删除位于 source&#x2F;_posts 目录下的相应Markdown文件。然后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>和<br>hexo generate<br></code></pre></td></tr></table></figure><p>以清除已删除文章的遗留文件。</p><h3 id="（三）高清图片资源"><a href="#（三）高清图片资源" class="headerlink" title="（三）高清图片资源"></a>（三）高清图片资源</h3><p><a href="https://wallpaperhub.app/">https://wallpaperhub.app/</a><br><a href="https://unsplash.com/">https://unsplash.com/</a></p><h3 id="（四）其他"><a href="#（四）其他" class="headerlink" title="（四）其他"></a>（四）其他</h3><p>待补充</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://valine.js.org/">评论插件</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>个人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
